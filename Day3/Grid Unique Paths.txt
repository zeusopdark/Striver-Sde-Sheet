class Solution {
    public int uniquePaths(int m, int n) {
        //using recursion
        //this solution is correct but for bigger values tle will occur so better to use            dp;
        int result=count(m,n);
        return result;
    }
    public int count(int row,int coloumn){
        if(row==1||coloumn==1)return 1;
       int left= count(row-1,coloumn);
       int right= count(row,coloumn-1);
        return left+right;
        
        
        
        //using  Top Down 2D Tabulation Dynamic Programming
        int [][]array=new int[m][n];
        for(int i=0;i<n;i++){
            array[m-1][i]=1;
        }
        for(int j=0;j<m;j++){
            array[j][n-1]=1;
        }
        for(int r=m-2;r>=0;r--){
            for(int c=n-2;c>=0;c--){
               array[r][c]=array[r+1][c]+array[r][c+1]; 
            }
        }
        return array[0][0];
    }
}