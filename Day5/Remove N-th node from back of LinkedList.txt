/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
      
        if (head.next == null && n == 1){
            return null;
        }
        ListNode fast = head;
        ListNode slow = head;
        while(n > 0){
            fast = fast.next;
            n -= 1;
        }
		
		// If fast equals null (when n = size of list), means remove 1st element.
		// In list of size 5,  5th last element = 1st element.
        if (fast == null) {
            return slow.next;
        }
        
        while(fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }

        slow.next = slow.next.next;
        return head;
    }
}